<?php
/**
 * Created by PhpStorm.
 * User: bigsave
 * Date: 2017/10/20
 * Time: 10:57
 */
namespace app\admin\controller;

use Picqer\Barcode\BarcodeGeneratorPNG;
use think\Db;
use app\common\controller\CommonController;
use app\admin\model\NameList;

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

use Endroid\QrCode\QrCode;



class Index extends CommonController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function test1(){
        $str = '-14,13213';
        $data = explode(',',$str);
        dump($data);
    }

    public function index()
    {
        $demo = \think\Loader::model('admin/SignService','service');
//        $key = $demo->create_key();
//        dump($key);die;
        $str = '加密解密';
        $str = $demo->public_encrypt($str); //用公密钥加密
        echo $str.'</br>';
        $str = $demo->private_decrypt($str); //用私密钥解密
        echo $str.'</br>';
            //=============================================================
        $str = $demo->private_encrypt($str); //用丝密钥加密
        echo $str.'</br>';
        $str = $demo->public_decrypt($str); //用公密钥解密
        echo $str.'</br>';
        die;
    }

    public function lists(){
        $NameList = model('NameList');
        $NameList->name = 'thinkPhp5';
        $NameList->save();
        dump($NameList);die;
    }

    /**
     * phpExcel
     */
    public function exportExcel(){
        //引用文件
        vendor('phpoffice.phpexcel.Classes.PHPExcel');
        $objPHPExcel = new \PHPExcel();

        $objPHPExcel->getProperties()->setCreator("Maarten Balliauw")
            ->setLastModifiedBy("Maarten Balliauw")
            ->setTitle("Office 2007 XLSX Test Document")
            ->setSubject("Office 2007 XLSX Test Document")
            ->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.")
            ->setKeywords("office 2007 openxml php")
            ->setCategory("Test result file");


// Add some data
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A1', 'Hello')
            ->setCellValue('B2', 'world!')
            ->setCellValue('C1', 'Hello')
            ->setCellValue('D2', 'world!');

// Miscellaneous glyphs, UTF-8
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A4', 'Miscellaneous glyphs')
            ->setCellValue('A5', 'éàèùâêîôûëïüÿäöüç');

// Rename worksheet
        $objPHPExcel->getActiveSheet()->setTitle('Simple');


// Set active sheet index to the first sheet, so Excel opens this as the first sheet
        $objPHPExcel->setActiveSheetIndex(0);


// Redirect output to a client’s web browser (Excel5)
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="01simple.xls"');
        header('Cache-Control: max-age=0');
// If you're serving to IE 9, then the following may be needed
        header('Cache-Control: max-age=1');

// If you're serving to IE over SSL, then the following may be needed
        header ('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); // always modified
        header ('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header ('Pragma: public'); // HTTP/1.0

        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        exit('123321');
    }

    /**
     * phpMail send
     */
    public function sendMail(){

//Load composer's autoloader
//        require 'vendor/autoload.php';
        vendor('phpmailer/phpmailer/src/PHPMailer');
//        export_class_look();
        $mail = new PHPMailer(true);                              // Passing `true` enables exceptions
//        dump($mail);die;
        try {
            //Server settings
            $mail->SMTPDebug = 2;                                 // Enable verbose debug output
            $mail->isSMTP();                                      // Set mailer to use SMTP
            $mail->Host = 'smtp1.example.com;smtp2.example.com';  // Specify main and backup SMTP servers
            $mail->SMTPAuth = true;                               // Enable SMTP authentication
            $mail->Username = 'user@example.com';                 // SMTP username
            $mail->Password = 'secret';                           // SMTP password
            $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
            $mail->Port = 587;                                    // TCP port to connect to

            //Recipients
            $mail->setFrom('from@example.com', 'Mailer');
            $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient
            $mail->addAddress('ellen@example.com');               // Name is optional
            $mail->addReplyTo('info@example.com', 'Information');
            $mail->addCC('cc@example.com');
            $mail->addBCC('bcc@example.com');

            //Attachments
//            $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments
//            $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name

            //Content
            $mail->isHTML(true);                                  // Set email format to HTML
            $mail->Subject = 'Here is the subject';
            $mail->Body    = 'This is the HTML message body <b>in bold!</b>';
            $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';

            $mail->send();
            echo 'Message has been sent';
        } catch (Exception $e) {
            echo 'Message could not be sent.';
            echo 'Mailer Error: ' . $mail->ErrorInfo;
        }
    }

    /**
     * endroid qrcode
     */
    public function qrCode(){

        vendor('endroid/qrcode/src/QrCode');

        $qrCode = new QrCode();
//        echo ;die;
//        dump($qrCode) ;die;
        $qrCode
            ->setText('ddLife is too short to be generating QR codes11')
            ->setImagePath(dirname(dirname(dirname(dirname(__FILE__)))).'/data')
            ->setSize(300)
            ->setPadding(10)
            ->setErrorCorrection('high')
            ->setForegroundColor(['r' => 0, 'g' => 0, 'b' => 0, 'a' => 0])
            ->setBackgroundColor(['r' => 255, 'g' => 255, 'b' => 255, 'a' => 0])
            ->setLabel('aScan the code')
            ->setLabelFontSize(16)
            ->setImageType(QrCode::IMAGE_TYPE_PNG)
        ;

// now we can directly output the qrcode
        header('Content-Type: '.$qrCode->getContentType());
//        $qrCode->render();

// save it to a file
//        $qrCode->save('qrcode.png');

// or create a response object
//        $response = new Response($qrCode->get(), 200, ['Content-Type' => $qrCode->getContentType()]);


    }

    /**
     * barcode
     */
    public function barcode(){
        vendor('picqer.barcode.src.BarcodeGeneratorPNG');
//        export_class_look();
        $generator = new BarcodeGeneratorPNG();
        echo $generator->getBarcode('081231723897', $generator::TYPE_CODE_128);


    }


    public function insertData(){

        $start = strtotime("2017-08-01");
        $end = strtotime("2017-09-01");
        for($i=$start;$i<=$end;$i+=86400){
            reportRegister($i);
        }
        exit("122");

    }
}
