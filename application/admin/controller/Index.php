<?php
/**
 * Created by PhpStorm.
 * User: bigsave
 * Date: 2017/10/20
 * Time: 10:57
 */
namespace app\admin\controller;
use Picqer\Barcode\BarcodeGeneratorPNG;
use think\Db;
use app\common\controller\CommonController;
use app\admin\model\NameList;

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

use Endroid\QrCode\QrCode;

class Index extends CommonController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }


    public function index()
    {

//        $data =['title'=>'权限名称','urls'=>'asdasdasd','status'=>1,'created_time'=>time()];
//        $ret = $this->validate($data,'Access.add', [], true);
//        dump($ret);
//        die;
        return $this->fetch('index',['a'=>1]);
//
    }
    public function login(){
        if($_POST){
            dump($_POST);
        }
        return $this->fetch();
    }

    /**
     * phpMail send
     */
    public function sendMail(){
        vendor('phpmailer/phpmailer/src/PHPMailer');
        $mail = new PHPMailer(true);                              // Passing `true` enables exceptions

        try {
            //Server settings
            $mail->SMTPDebug = 2;                                 // Enable verbose debug output
            $mail->isSMTP();                                      // Set mailer to use SMTP
            $mail->Host = 'smtp1.example.com;smtp2.example.com';  // Specify main and backup SMTP servers
            $mail->SMTPAuth = true;                               // Enable SMTP authentication
            $mail->Username = 'user@example.com';                 // SMTP username
            $mail->Password = 'secret';                           // SMTP password
            $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
            $mail->Port = 587;                                    // TCP port to connect to

            //Recipients
            $mail->setFrom('from@example.com', 'Mailer');
            $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient
            $mail->addAddress('ellen@example.com');               // Name is optional
            $mail->addReplyTo('info@example.com', 'Information');
            $mail->addCC('cc@example.com');
            $mail->addBCC('bcc@example.com');

            //Attachments
//            $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments
//            $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name

            //Content
            $mail->isHTML(true);                                  // Set email format to HTML
            $mail->Subject = 'Here is the subject';
            $mail->Body    = 'This is the HTML message body <b>in bold!</b>';
            $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';

            $mail->send();
            echo 'Message has been sent';
        } catch (Exception $e) {
            echo 'Message could not be sent.';
            echo 'Mailer Error: ' . $mail->ErrorInfo;
        }
    }

    /**
     * endroid qrcode
     */
    public function qrCode(){

        vendor('endroid/qrcode/src/QrCode');

        $qrCode = new QrCode();
//        echo ;die;
//        dump($qrCode) ;die;
        $qrCode
            ->setText('ddLife is too short to be generating QR codes11')
            ->setImagePath(dirname(dirname(dirname(dirname(__FILE__)))).'/data')
            ->setSize(300)
            ->setPadding(10)
            ->setErrorCorrection('high')
            ->setForegroundColor(['r' => 0, 'g' => 0, 'b' => 0, 'a' => 0])
            ->setBackgroundColor(['r' => 255, 'g' => 255, 'b' => 255, 'a' => 0])
            ->setLabel('aScan the code')
            ->setLabelFontSize(16)
            ->setImageType(QrCode::IMAGE_TYPE_PNG)
        ;

// now we can directly output the qrcode
        header('Content-Type: '.$qrCode->getContentType());
//        $qrCode->render();

// save it to a file
//        $qrCode->save('qrcode.png');

// or create a response object
//        $response = new Response($qrCode->get(), 200, ['Content-Type' => $qrCode->getContentType()]);

    }

    /**
     * barcode
     */
    public function barcode(){
        vendor('picqer.barcode.src.BarcodeGeneratorPNG');
//        export_class_look();
        $generator = new BarcodeGeneratorPNG();
        echo $generator->getBarcode('081231723897', $generator::TYPE_CODE_128);


    }

}
