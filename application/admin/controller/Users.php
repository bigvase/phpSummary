<?php
/**
 * Class UserController
 */

namespace app\admin\controller;

use app\common\controller\BaseController;
use think\Db;
use think\Request;

class Users extends  BaseController{

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    //角色列表页面
    public function Index(){
        $list = DB::name('Role')->order('id desc')->select();

        return $this->fetch("index",[
            'list' => $list
        ]);
    }

    /*
     * 添加或者编辑角色页面
     * get 展示页面
     * post 处理添加或者编辑动作
     */
    public function roleSet(){
        if( Request::instance()->get() ){
            $id = input("id",0);
            $info = [];
            if( $id ){
                $info = DB::name('Role')->where([ 'id' => $id ])->find();
            }
            return $this->fetch("set",[
                "info" => $info
            ]);
        }

        $id = input("id",0);
        $name = input("name","");
        if( !$name ){
            $this->error("请输入合法的角色名称~~");
        }
        //查询是否存在角色名相等的记录
        $role_info = DB::name('Role')
            ->where([ 'name' => $name,'id'=>['<>',$id]])
            ->find();
        if( $role_info ){
            $this->error("该角色名称已存在，请输入其他的角色名称~~");
        }

        $info = DB::name('Role')->where([ 'id' => $id ])->find();
        $saveDt = [
            'name'=>$name,
            'status'=>1
        ];
        if( $info ){//编辑动作
            $saveDt['updated_time'] = time();
            $ret = DB::name('Role')->where(['id'=>$id])->update($saveDt);
            if($ret) $this->success('修改成功~~');
        }else{//添加动作
            $saveDt['created_time'] = time();
            $ret = DB::name('Role')->insert($saveDt);
            if($ret) $this->success('添加成功');
        }
        $this->error("操作失败~~");
    }

    //设置角色和权限的关系逻辑
    public function Access(){
        //http get 请求 展示页面
        if( Request::instance()->get() ){
            $id = input("id",0);
            $reback_url = Url("/role/index");
            if( !$id ){
                $this->redirect( $reback_url );
            }
            $info = DB::name('Role')->where([ 'id' => $id ])->find();
            if( !$info ){
                $this->redirect( $reback_url );
            }

            //取出所有的权限
            $access_list = DB::name('Access')->where([ 'status' => 1 ])->order('id desc')->select();

            //取出所有已分配的权限
            $role_access_list = DB::name('RoleAccess')->where([ 'role_id' => $id ])->select();
            $access_ids = array_column( $role_access_list,"access_id" );
            return $this->fetch("access",[
                "info" => $info,
                'access_list' => $access_list,
                "access_ids" => $access_ids
            ]);
        }
        //实现保存选中权限的逻辑
        $id = input("id",0);
        $access_ids = $_POST["access_ids"];
        if( !$id ){
            $this->error("您指定的角色不存在");
        }

        $info = DB::name('Role')->where([ 'id' => $id ])->find();
        if( !$info ){
            $this->error("您指定的角色不存在");
        }

        //取出所有已分配给指定角色的权限
        $role_access_list = DB::name('RoleAccess')->where([ 'role_id' => $id ])->select();

        $assign_access_ids = array_column( $role_access_list , 'access_id' );
        /**
         * 找出删除的权限
         * 假如已有的权限集合是A，界面传递过得权限集合是B
         * 权限集合A当中的某个权限不在权限集合B当中，就应该删除
         * 使用 array_diff() 计算补集
         */
        $delete_access_ids = array_diff( $assign_access_ids,$access_ids );

        if( $delete_access_ids ){
            $delete_access_string = implode(',',$delete_access_ids);
            DB::name('RoleAccess')->where([ 'role_id' => $id,'access_id' => [ 'in',$delete_access_string ] ])->delete();
        }

        /**
         * 找出添加的权限
         * 假如已有的权限集合是A，界面传递过得权限集合是B
         * 权限集合B当中的某个权限不在权限集合A当中，就应该添加
         * 使用 array_diff() 计算补集
         */
        $new_access_ids = array_diff( $access_ids,$assign_access_ids );
        if( $new_access_ids ){
            foreach( $new_access_ids as $_access_id  ){
                $saveDt = [
                    'role_id'=>$id,
                    'access_id'=>$_access_id,
                    'created_time'=>time()
                ];
                DB::name('RoleAccess')->insert($saveDt);
            }
        }
        $this->success("操作成功~~");
    }

//用户列表
    public function userIndex(){
        //查询所有用户
        $user_list = Db::name('User')->where([ 'status' => 1 ])->order([ 'id' => SORT_DESC ])->select();
        //判断当前用户时候有访问添加或编辑用户的权限
        $set_flag = $this->checkPrivilege( "user/set" );

        return $this->fetch('index',[
            'list' => $user_list,
            'set_flag' => $set_flag
        ]);
    }

    /*
     * 添加或者编辑用户页面
     * get 展示页面
     * post 处理添加或者编辑用户
     */
    public function userSet(){
        if(Request::instance()->get('id')){
            $uid = input('id');
            $user = Db::name('user')->where(['id'=>$uid,'status'=>1])->find();
            $this->assign('user',$user);
        }
        if(Request::instance()->post()){
            $saveDt = [];
            $id = intval( input("id",0) );
            $saveDt['name']  = trim( input("name","") );
            $saveDt['email'] = trim( input("email","") );
            $saveDt['created_time'] = time();
            $saveDt['is_admin'] = trim( input("is_admin",''));
            $role_ids = [1,3,4,5];//$_POST["role_ids"];//选中的角色id

            if( mb_strlen($saveDt['name'],"utf-8") < 1 || mb_strlen($saveDt['name'],"utf-8") > 20 ){
                $this->error('',Url('/admin/users/index'));
            }

            if( !filter_var( $saveDt['email'] , FILTER_VALIDATE_EMAIL) ){
                $this->error('请输入合法的邮箱~~');
            }
            //更新
            if($id){
                $saveDt['updated_time'] = time();
                $user = DB::name('User')->where(['id'=>$id])->find();

                if(!$user) $this->error('更新用户不存在~~');

                $has_in = DB::name('User')->where(['email'=>$saveDt['email'],'id'=>['neq',$id]])->find();

                if($has_in) $this->error('邮箱已存在~~');
                $ret = DB::name('User')->where(['id'=>$id])->update($saveDt);

            }else{
                //查询该邮箱是否已经存在
                $has_in = DB::name('User')->where([ 'email' => $saveDt['email'] ])->count();
                if($has_in) $this->error('邮箱已存在~~');
                $ret = DB::name('User')->insert($saveDt);
                if($ret) $id = Db::name('User')->getLastInsID();

            }
            if($ret){
                /**
                 * 找出删除的角色
                 * 假如已有的角色集合是A，界面传递过得角色集合是B
                 * 角色集合A当中的某个角色不在角色集合B当中，就应该删除
                 * array_diff();计算补集
                 */
                $user_role_list = DB::name('UserRole')->where([ 'uid' => $id ])->select();
                $related_role_ids = [];
                if( $user_role_list ){
                    foreach( $user_role_list as $_item ){
                        $related_role_ids[] = $_item['role_id'];
                        if( !in_array( $_item['role_id'],$role_ids ) ){
                            DB::name('UserRole')->where(['uid'=>$id,'role_id'=>$_item['role_id']])->delete();
                        }
                    }
                }
                /**
                 * 找出添加的角色
                 * 假如已有的角色集合是A，界面传递过得角色集合是B
                 * 角色集合B当中的某个角色不在角色集合A当中，就应该添加
                 */
                if ( $role_ids ){
                    foreach( $role_ids as $_role_id ){
                        if( !in_array( $_role_id ,$related_role_ids ) ){
                            $sDt = [
                                'uid'     => $id,
                                'role_id' => $_role_id,
                                'created_time'=>time()
                            ];
                            DB::name('UserRole')->insert($sDt);
                        }
                    }
                }
                $this->success('添加数据成功~~~');
            }else{
                $this->error('添加数据异常~~');
            }
        }
        return $this->fetch('userSet',[]);
    }

    //权限列表
    public function AccessIndex(){
        $access_list = Db::name('Access')->where([ 'status' => 1 ])->order('id desc')->select();
        return $this->fetch('index',[
            'list' => $access_list
        ]);
    }

    /*
     * 添加或者编辑权限
     * get 展示页面
     * post 处理添加或者编辑权限
     */
    public function accessedSet(){
        //如果是get请求则演示页面
        if( Request::instance()->get() ){
            $id = $this->get("id",0);
            $info = [];
            if( $id ){
                $info = DB::name('Access')->where([ 'status' => 1 ,'id' => $id ])->find();
            }
            return $this->fetch('set',[
                'info' => $info
            ]);
        }
        $id = intval( input("id",0) );
        $title = trim( input("title","") );
        $urls = trim( input("urls","") );
        if( mb_strlen($title,"utf-8") < 1 || mb_strlen($title,"utf-8") > 20 ){
            $this->error('请输入合法的权限标题~~');
        }

        if( !$urls ){
            $this->error('请输入合法的Urls~~');
        }

//		$urls = explode("\n",$urls);
//		if( !$urls ){
//            $this->error('请输入合法的Urls~~');
//		}

        //查询同一标题的是否存在
        $has_in = DB::name('Access')->where(['title'=>$title,'id'=>['neq',$id]])->count();
        if( $has_in ){
            $this->error('该权限标题已存在~~');
        }

        //查询指定id的权限
        $info = DB::name('Access')->where([ 'id' => $id ])->select();
        $saveDt['title'] = $title;
        $saveDt['urls'] = $urls;
        $saveDt['status'] = 1;
        if( $info ){//如果存在则是编辑
            $saveDt['updated_time'] = time();
            $ret = DB::name('Access')->where(['id'=>$id])->update($saveDt);
            if($ret) $this->success('更新成功~~');
        }else{//不存在就是添加
            $saveDt['created_time'] = time();
            $ret = DB::name('Access')->insert($saveDt);
            if($ret) $this->success('操作成功~~');
        }
    }


}
