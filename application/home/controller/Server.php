<?php
/**
 * Created by PhpStorm.
 * User: bigsave
 * Date: 2018/5/31
 * Time: 9:48
 */

namespace app\home\controller;


use think\Config;
use think\Controller;
use think\Db;
use think\Exception;

class Server extends controller
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function server(){
        $respData= [];
        $service = \think\loader::model('Admin/HttpRequestService','service');

        if(empty($service->errMsg)){
            try{
                $respData = $this->doRun($service->param);
            }catch (Exception $e){
                exception($e->getMessage());
            }
        }

        if ($service->errMsg) {
            $respData['status']     = 'INIT';
            $respData['errorMsg']   = $service->errMsg;
        } else {
            $respData['status'] = 'SUCCESS';
        }

        $respData['reqData']   = json_encode($respData);
        $respData['interName'] = $service->inter;
        $respData['timestamp'] = time();
        $respData['platform']  = $service->username;

        //加签

        $signServer    = \think\loader::model('Admin/SignService','service');
        $retData['param'] = $signServer->param_aes_encode(json_encode($respData),$service->interConfig['base_info']['aesKey'],$service->interConfig['base_info']['aesIV']);
        $retData['sign'] = $signServer->ecsSign($retData['param'],$service->interConfig['base_info']['private_key']);
//        dump($retData);die;
        echo json_encode($retData);
        $respDataJson = json_encode($respData);
        $saveData     = ['return' => $respDataJson, 'returnTime' => time(), 'returnNum' => '1'];
        //返回参数保存
        try {
            DB::name('service_request_log')->where(['requestNo' => $service->requestNo, 'platform' => $service->username])->update($saveData);
        } catch (Exception $e) {

        }
    }

    private function doRun($param){
        $interName = $param['interName'];
        $reqData   = $param['detailData'];
        $interConfig = Config::get('interfaceParam');
//        echo $interName;die;
        if (!in_array($interName, $interConfig['interface_name'])) exception("{$interName}方法不存在");

//        $a = \think\loader::model('Admin/SignService','service');

        //尝试调用
        try {
            $ret             = call_user_func_array([$this, underlined_hump(strtolower($interName) . '_Callback')], [$reqData]);
            return $ret;
        } catch (Exception $e) {
            exception($e->getMessage());
        }
        return false;
    }

    /**
     * 测试
     */
    private function testCallback(){
        return ['aaa'=>'bbb'];
    }

}